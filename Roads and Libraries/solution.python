def dfs(graph, start, visited):
    stack = [start]
    while stack:
        vertex = stack.pop()
        if vertex not in visited:
            visited.add(vertex)
            stack.extend(graph[vertex] - visited)

def roadsAndLibraries(n, cLib, cRoad, cities):
    
    graph = {i: set() for i in range(1,n+1)}
    for city1, city2 in cities:
        graph[city1].add(city2)
        graph[city2].add(city1)


    if cLib < cRoad:
        return cLib * n

    
    visited = set()
    nCC = 0
    for city in range(1, n+1):
        if city not in visited:
            dfs(graph, city, visited)
            nCC += 1


    return nCC*cLib + (n-nCC)*cRoad

if __name__ == '__main__':
    q = int(input())

    for _ in range(q):
        n, m, cLib, cRoad = map(int, input().split())
        cities = []
        for _ in range(m):
            cities.append(list(map(int, input().split())))

        result = roadsAndLibraries(n, cLib, cRoad, cities)
        print(result)
